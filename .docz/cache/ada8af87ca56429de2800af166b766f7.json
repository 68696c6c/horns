{"remainingRequest":"/site/node_modules/docz-core/node_modules/thread-loader/dist/cjs.js??ref--5-1!/site/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--5-2!/site/node_modules/source-map-loader/index.js!/site/src/config/grid.js","dependencies":[{"path":"/site/src/config/grid.js","mtime":1573330658000},{"path":"/site/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":1573331449000},{"path":"/site/node_modules/docz-core/node_modules/thread-loader/dist/cjs.js","mtime":1573331450000},{"path":"/site/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1573331449000},{"path":"/site/node_modules/source-map-loader/index.js","mtime":1573331450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvc2l0ZS9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9zaXRlL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmVudGVyTW9kdWxlOwogIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7Cn0pKCk7Cgp2YXIgX19zaWduYXR1cmVfXyA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbFsiZGVmYXVsdCJdLnNpZ25hdHVyZSA6IGZ1bmN0aW9uIChhKSB7CiAgcmV0dXJuIGE7Cn07CgovKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItZGVzdHJ1Y3R1cmluZyAqLwppbXBvcnQgU3BhY2luZ0NvbmZpZywgeyBzcGFjaW5nU2l6ZXMgfSBmcm9tICcuL3NwYWNpbmcnOwppbXBvcnQgeyBzYWZlR2V0VmFsdWUgfSBmcm9tICcuL3V0aWxzJzsKZXhwb3J0IHZhciBicmVha3BvaW50cyA9IFsnJywgJ21pbicsICdzbWFsbCcsICdtb2JpbGUnLCAnbW9iaWxlJywgJ21lZGl1bScsICdsYXJnZScsICdjb250YWluZXInLCAnbWF4J107IC8vIEBUT0RPIGdldCBkZWZhdWx0IHZhbHVlcyBmcm9tIGEgY29uZmlnIGZpbGUuCgppZiAodHlwZW9mIGJyZWFrcG9pbnRzICE9PSAndW5kZWZpbmVkJyAmJiBicmVha3BvaW50cyAmJiBicmVha3BvaW50cyA9PT0gT2JqZWN0KGJyZWFrcG9pbnRzKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGJyZWFrcG9pbnRzKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShicmVha3BvaW50cywgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogImJyZWFrcG9pbnRzIiwKICAgICAgZmlsZW5hbWU6ICJzcmMvY29uZmlnL2dyaWQuanMiCiAgICB9CiAgfSk7Cn0KCnZhciBkZWZhdWx0R3JpZCA9IHsKICBnYXA6ICdtZWRpdW0nLAogIGNvbHVtbk1pbjogJzI4MHB4JywKICBicmVha3BvaW50czogewogICAgbWluOiAnMzIwcHgnLAogICAgc21hbGw6ICc0ODBweCcsCiAgICBtb2JpbGU6ICc0ODBweCcsCiAgICBtZWRpdW06ICc3NjhweCcsCiAgICBsYXJnZTogJzk5MnB4JywKICAgIGNvbnRhaW5lcjogJzEyMDBweCcsCiAgICBtYXg6ICcxMjAwcHgnCiAgfQp9OwoKdmFyIF9nZXRCcmVha3BvaW50ID0gZnVuY3Rpb24gZ2V0QnJlYWtwb2ludChwb2ludHMsIGJyZWFrcG9pbnQpIHsKICBpZiAoIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBvaW50cywgYnJlYWtwb2ludCkpIHsKICAgIHJldHVybiBkZWZhdWx0R3JpZC5icmVha3BvaW50cy5tb2JpbGU7CiAgfQoKICByZXR1cm4gcG9pbnRzW2JyZWFrcG9pbnRdOwp9OwoKZXhwb3J0IHsgX2dldEJyZWFrcG9pbnQgYXMgZ2V0QnJlYWtwb2ludCB9OwoKaWYgKHR5cGVvZiBfZ2V0QnJlYWtwb2ludCAhPT0gJ3VuZGVmaW5lZCcgJiYgX2dldEJyZWFrcG9pbnQgJiYgX2dldEJyZWFrcG9pbnQgPT09IE9iamVjdChfZ2V0QnJlYWtwb2ludCkgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShfZ2V0QnJlYWtwb2ludCkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2dldEJyZWFrcG9pbnQsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJfZ2V0QnJlYWtwb2ludCIsCiAgICAgIGZpbGVuYW1lOiAic3JjL2NvbmZpZy9ncmlkLmpzIgogICAgfQogIH0pOwp9CgppZiAodHlwZW9mIF9nZXRCcmVha3BvaW50ICE9PSAndW5kZWZpbmVkJyAmJiBfZ2V0QnJlYWtwb2ludCAmJiBfZ2V0QnJlYWtwb2ludCA9PT0gT2JqZWN0KF9nZXRCcmVha3BvaW50KSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKF9nZXRCcmVha3BvaW50KSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZ2V0QnJlYWtwb2ludCwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogImdldEJyZWFrcG9pbnQiLAogICAgICBmaWxlbmFtZTogInNyYy9jb25maWcvZ3JpZC5qcyIKICAgIH0KICB9KTsKfQoKdmFyIEdyaWRDb25maWcgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBHcmlkQ29uZmlnKHNwYWNpbmdDb25maWcpIHsKICAgIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHcmlkQ29uZmlnKTsKCiAgICBpZiAoIShzcGFjaW5nQ29uZmlnIGluc3RhbmNlb2YgU3BhY2luZ0NvbmZpZykpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdHcmlkQ29uZmlnOiBpbnZhbGlkIFNwYWNpbmdDb25maWcnKTsKICAgIH0KCiAgICB2YXIgZ2FwID0gc2FmZUdldFZhbHVlKGNvbmZpZywgJ2dhcCcsIGRlZmF1bHRHcmlkLmdhcCk7CgogICAgaWYgKCFzcGFjaW5nU2l6ZXMuaW5jbHVkZXMoZ2FwKSkgewogICAgICBnYXAgPSBkZWZhdWx0R3JpZC5nYXA7CiAgICB9CgogICAgdGhpcy5nYXAgPSBzcGFjaW5nQ29uZmlnW2dhcF0ucHg7CiAgICB0aGlzLmNvbHVtbk1pbiA9IHNhZmVHZXRWYWx1ZShjb25maWcsICdjb2x1bW5NaW4nLCBkZWZhdWx0R3JpZC5jb2x1bW5NaW4pOwogICAgdmFyIGNvbmZpZ0JyZWFrcG9pbnRzID0gc2FmZUdldFZhbHVlKGNvbmZpZywgJ2JyZWFrcG9pbnRzJywgZGVmYXVsdEdyaWQuYnJlYWtwb2ludHMpOwogICAgdGhpcy5icmVha3BvaW50cyA9IHsKICAgICAgbWluOiBzYWZlR2V0VmFsdWUoY29uZmlnQnJlYWtwb2ludHMsICdtaW4nLCBkZWZhdWx0R3JpZC5icmVha3BvaW50cy5taW4pLAogICAgICBzbWFsbDogc2FmZUdldFZhbHVlKGNvbmZpZ0JyZWFrcG9pbnRzLCAnc21hbGwnLCBkZWZhdWx0R3JpZC5icmVha3BvaW50cy5zbWFsbCksCiAgICAgIG1vYmlsZTogc2FmZUdldFZhbHVlKGNvbmZpZ0JyZWFrcG9pbnRzLCAnbW9iaWxlJywgZGVmYXVsdEdyaWQuYnJlYWtwb2ludHMubW9iaWxlKSwKICAgICAgbWVkaXVtOiBzYWZlR2V0VmFsdWUoY29uZmlnQnJlYWtwb2ludHMsICdtZWRpdW0nLCBkZWZhdWx0R3JpZC5icmVha3BvaW50cy5tZWRpdW0pLAogICAgICBsYXJnZTogc2FmZUdldFZhbHVlKGNvbmZpZ0JyZWFrcG9pbnRzLCAnbGFyZ2UnLCBkZWZhdWx0R3JpZC5icmVha3BvaW50cy5sYXJnZSksCiAgICAgIGNvbnRhaW5lcjogc2FmZUdldFZhbHVlKGNvbmZpZ0JyZWFrcG9pbnRzLCAnY29udGFpbmVyJywgZGVmYXVsdEdyaWQuYnJlYWtwb2ludHMuY29udGFpbmVyKSwKICAgICAgbWF4OiBzYWZlR2V0VmFsdWUoY29uZmlnQnJlYWtwb2ludHMsICdtYXgnLCBkZWZhdWx0R3JpZC5icmVha3BvaW50cy5tYXgpCiAgICB9OwogICAgY29uc29sZS5sb2coJ0dyaWRDb25maWcnLCB0aGlzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhHcmlkQ29uZmlnLCBbewogICAga2V5OiAiZ2V0QnJlYWtwb2ludCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QnJlYWtwb2ludChicmVha3BvaW50KSB7CiAgICAgIHJldHVybiBfZ2V0QnJlYWtwb2ludCh0aGlzLmJyZWFrcG9pbnRzLCBicmVha3BvaW50KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRDb250YWluZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbnRhaW5lcigpIHsKICAgICAgcmV0dXJuIF9nZXRCcmVha3BvaW50KHRoaXMuYnJlYWtwb2ludHMsICdjb250YWluZXInKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfX3JlYWN0c3RhbmRpbl9fcmVnZW5lcmF0ZUJ5RXZhbCIsCiAgICAvLyBAdHMtaWdub3JlCiAgICB2YWx1ZTogZnVuY3Rpb24gX19yZWFjdHN0YW5kaW5fX3JlZ2VuZXJhdGVCeUV2YWwoa2V5LCBjb2RlKSB7CiAgICAgIC8vIEB0cy1pZ25vcmUKICAgICAgdGhpc1trZXldID0gZXZhbChjb2RlKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBHcmlkQ29uZmlnOwp9KCk7Cgp2YXIgX2RlZmF1bHQgPSBHcmlkQ29uZmlnOwpleHBvcnQgZGVmYXVsdCBfZGVmYXVsdDsKCmlmICh0eXBlb2YgR3JpZENvbmZpZyAhPT0gJ3VuZGVmaW5lZCcgJiYgR3JpZENvbmZpZyAmJiBHcmlkQ29uZmlnID09PSBPYmplY3QoR3JpZENvbmZpZykgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShHcmlkQ29uZmlnKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShHcmlkQ29uZmlnLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiR3JpZENvbmZpZyIsCiAgICAgIGZpbGVuYW1lOiAic3JjL2NvbmZpZy9ncmlkLmpzIgogICAgfQogIH0pOwp9Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciByZWFjdEhvdExvYWRlciA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmRlZmF1bHQ7CgogIGlmICghcmVhY3RIb3RMb2FkZXIpIHsKICAgIHJldHVybjsKICB9CgogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKGJyZWFrcG9pbnRzLCAiYnJlYWtwb2ludHMiLCAiL3NpdGUvc3JjL2NvbmZpZy9ncmlkLmpzIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoZGVmYXVsdEdyaWQsICJkZWZhdWx0R3JpZCIsICIvc2l0ZS9zcmMvY29uZmlnL2dyaWQuanMiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihfZ2V0QnJlYWtwb2ludCwgImdldEJyZWFrcG9pbnQiLCAiL3NpdGUvc3JjL2NvbmZpZy9ncmlkLmpzIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoR3JpZENvbmZpZywgIkdyaWRDb25maWciLCAiL3NpdGUvc3JjL2NvbmZpZy9ncmlkLmpzIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoX2RlZmF1bHQsICJkZWZhdWx0IiwgIi9zaXRlL3NyYy9jb25maWcvZ3JpZC5qcyIpOwp9KSgpOwoKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgbGVhdmVNb2R1bGUgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5sZWF2ZU1vZHVsZTsKICBsZWF2ZU1vZHVsZSAmJiBsZWF2ZU1vZHVsZShtb2R1bGUpOwp9KSgpOw=="},{"version":3,"sources":["/site/src/config/grid.js"],"names":["SpacingConfig","spacingSizes","safeGetValue","breakpoints","defaultGrid","gap","columnMin","min","small","mobile","medium","large","container","max","getBreakpoint","points","breakpoint","Object","hasOwnProperty","call","GridConfig","spacingConfig","config","Error","includes","px","configBreakpoints","console","log"],"mappings":"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","sourcesContent":["/* eslint-disable prefer-destructuring */\nimport SpacingConfig, { spacingSizes } from './spacing'\nimport { safeGetValue } from './utils'\n\nexport const breakpoints = [\n  '',\n  'min',\n  'small',\n  'mobile',\n  'mobile',\n  'medium',\n  'large',\n  'container',\n  'max',\n]\n\n// @TODO get default values from a config file.\nconst defaultGrid = {\n  gap: 'medium',\n  columnMin: '280px',\n  breakpoints: {\n    min: '320px',\n    small: '480px',\n    mobile: '480px',\n    medium: '768px',\n    large: '992px',\n    container: '1200px',\n    max: '1200px',\n  },\n}\n\nexport const getBreakpoint = (points, breakpoint) => {\n  if (!Object.hasOwnProperty.call(points, breakpoint)) {\n    return defaultGrid.breakpoints.mobile\n  }\n  return points[breakpoint]\n}\n\nclass GridConfig {\n  constructor(spacingConfig, config = {}) {\n    if (!(spacingConfig instanceof SpacingConfig)) {\n      throw new Error('GridConfig: invalid SpacingConfig')\n    }\n    let gap = safeGetValue(config, 'gap', defaultGrid.gap)\n    if (!spacingSizes.includes(gap)) {\n      gap = defaultGrid.gap\n    }\n    this.gap = spacingConfig[gap].px\n\n    this.columnMin = safeGetValue(config, 'columnMin', defaultGrid.columnMin)\n\n    const configBreakpoints = safeGetValue(config, 'breakpoints', defaultGrid.breakpoints)\n    this.breakpoints = {\n      min: safeGetValue(configBreakpoints, 'min', defaultGrid.breakpoints.min),\n      small: safeGetValue(configBreakpoints, 'small', defaultGrid.breakpoints.small),\n      mobile: safeGetValue(configBreakpoints, 'mobile', defaultGrid.breakpoints.mobile),\n      medium: safeGetValue(configBreakpoints, 'medium', defaultGrid.breakpoints.medium),\n      large: safeGetValue(configBreakpoints, 'large', defaultGrid.breakpoints.large),\n      container: safeGetValue(configBreakpoints, 'container', defaultGrid.breakpoints.container),\n      max: safeGetValue(configBreakpoints, 'max', defaultGrid.breakpoints.max),\n    }\n\n    console.log('GridConfig', this)\n  }\n\n  getBreakpoint(breakpoint) {\n    return getBreakpoint(this.breakpoints, breakpoint)\n  }\n\n  getContainer() {\n    return getBreakpoint(this.breakpoints, 'container')\n  }\n}\n\nexport default GridConfig\n"]}]}