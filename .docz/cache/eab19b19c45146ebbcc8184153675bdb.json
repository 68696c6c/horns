{"remainingRequest":"/site/node_modules/docz-core/node_modules/thread-loader/dist/cjs.js??ref--5-1!/site/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--5-2!/site/node_modules/source-map-loader/index.js!/site/src/config/spacing.js","dependencies":[{"path":"/site/src/config/spacing.js","mtime":1573330658000},{"path":"/site/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":1573331449000},{"path":"/site/node_modules/docz-core/node_modules/thread-loader/dist/cjs.js","mtime":1573331450000},{"path":"/site/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1573331449000},{"path":"/site/node_modules/source-map-loader/index.js","mtime":1573331450000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvc2l0ZS9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9zaXRlL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmVudGVyTW9kdWxlOwogIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7Cn0pKCk7Cgp2YXIgX19zaWduYXR1cmVfXyA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbFsiZGVmYXVsdCJdLnNpZ25hdHVyZSA6IGZ1bmN0aW9uIChhKSB7CiAgcmV0dXJuIGE7Cn07CgovKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItZGVzdHJ1Y3R1cmluZyAqLwppbXBvcnQgVHlwb2dyYXBoeUNvbmZpZyBmcm9tICcuL3R5cG9ncmFwaHknOwppbXBvcnQgeyB2YWx1ZVRvSW50IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnOwppbXBvcnQgeyBzYWZlR2V0VmFsdWUgfSBmcm9tICcuL3V0aWxzJzsKCnZhciBweFRvRU0gPSBmdW5jdGlvbiBweFRvRU0oYmFzZSwgcHgpIHsKICByZXR1cm4gIiIuY29uY2F0KHZhbHVlVG9JbnQocHgpIC8gdmFsdWVUb0ludChiYXNlKSwgImVtIik7Cn07Cgp2YXIgZW1Ub1BYID0gZnVuY3Rpb24gZW1Ub1BYKGJhc2UsIGVtKSB7CiAgcmV0dXJuICIiLmNvbmNhdCh2YWx1ZVRvSW50KGVtKSAvIHZhbHVlVG9JbnQoYmFzZSksICJweCIpOwp9OyAvLyBAVE9ETyBnZXQgZGVmYXVsdCB2YWx1ZXMgZnJvbSBhIGNvbmZpZyBmaWxlLgovLyBUbyB3b3JrIGNvcnJlY3RseSwgdGhlc2UgcmF0aW9zIG5lZWQgdG8gYmUgbWFpbnRhaW5lZCBleGFjdGx5LCBlLmcuIHh4U21hbGwgbXVzdCBiZSAyeCB0aW55IGV0Yy4KCgp2YXIgZGVmYXVsdFNwYWNpbmcgPSB7CiAgbWluOiAnMCcsCiAgdGlueTogJzJweCcsCiAgeHhTbWFsbDogJzRweCcsCiAgeFNtYWxsOiAnOHB4JywKICBzbWFsbDogJzEycHgnLAogIG1lZGl1bTogJzE2cHgnLAogIGxhcmdlOiAnMjRweCcsCiAgeExhcmdlOiAnMzJweCcsCiAgeHhMYXJnZTogJzQ4cHgnLAogIGdpYW50OiAnNjRweCcsCiAgbWF4OiAnODhweCcKfTsKZXhwb3J0IHZhciBzcGFjaW5nU2l6ZXMgPSBbJ21pbicsICd0aW55JywgJ3h4U21hbGwnLCAneFNtYWxsJywgJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZScsICd4TGFyZ2UnLCAneHhMYXJnZScsICdnaWFudCcsICdtYXgnXTsKCmlmICh0eXBlb2Ygc3BhY2luZ1NpemVzICE9PSAndW5kZWZpbmVkJyAmJiBzcGFjaW5nU2l6ZXMgJiYgc3BhY2luZ1NpemVzID09PSBPYmplY3Qoc3BhY2luZ1NpemVzKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNwYWNpbmdTaXplcykpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3BhY2luZ1NpemVzLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAic3BhY2luZ1NpemVzIiwKICAgICAgZmlsZW5hbWU6ICJzcmMvY29uZmlnL3NwYWNpbmcuanMiCiAgICB9CiAgfSk7Cn0KCnZhciBTcGFjaW5nQ29uZmlnID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gU3BhY2luZ0NvbmZpZyh0eXBvZ3JhcGh5Q29uZmlnKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTcGFjaW5nQ29uZmlnKTsKCiAgICBpZiAoISh0eXBvZ3JhcGh5Q29uZmlnIGluc3RhbmNlb2YgVHlwb2dyYXBoeUNvbmZpZykpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdTcGFjaW5nQ29uZmlnOiBpbnZhbGlkIFR5cG9ncmFwaHlDb25maWcnKTsKICAgIH0KCiAgICB2YXIgYmFzZUZvbnRTaXplID0gdHlwb2dyYXBoeUNvbmZpZy5zaXplcy5iYXNlOwogICAgc3BhY2luZ1NpemVzLmZvckVhY2goZnVuY3Rpb24gKHNpemUpIHsKICAgICAgdmFyIGNvbmZpZ1ZhbHVlID0gc2FmZUdldFZhbHVlKGNvbmZpZywgc2l6ZSwgJycpOwogICAgICB2YXIgZW07CiAgICAgIHZhciBweDsKCiAgICAgIGlmIChjb25maWdWYWx1ZS5pbmNsdWRlcygncHgnKSkgewogICAgICAgIGVtID0gcHhUb0VNKGJhc2VGb250U2l6ZSwgY29uZmlnVmFsdWUpOwogICAgICAgIHB4ID0gY29uZmlnVmFsdWU7CiAgICAgIH0gZWxzZSBpZiAoY29uZmlnVmFsdWUuaW5jbHVkZXMoJ2VtJykpIHsKICAgICAgICBlbSA9IGNvbmZpZ1ZhbHVlOwogICAgICAgIHB4ID0gZW1Ub1BYKGJhc2VGb250U2l6ZSwgY29uZmlnVmFsdWUpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBkZWYgPSBzYWZlR2V0VmFsdWUoY29uZmlnLCBzaXplLCBkZWZhdWx0U3BhY2luZ1tzaXplXSk7CiAgICAgICAgZW0gPSBweFRvRU0oYmFzZUZvbnRTaXplLCBkZWYpOwogICAgICAgIHB4ID0gZGVmOwogICAgICB9CgogICAgICBfdGhpc1tzaXplXSA9IHsKICAgICAgICBlbTogZW0sCiAgICAgICAgcHg6IHB4CiAgICAgIH07CiAgICB9KTsKICAgIGNvbnNvbGUubG9nKCdTcGFjaW5nQ29uZmlnJywgdGhpcyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU3BhY2luZ0NvbmZpZywgW3sKICAgIGtleTogImdldFNwYWNpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNwYWNpbmcoc2l6ZSkgewogICAgICBpZiAodGhpc1tzaXplXSkgewogICAgICAgIHJldHVybiB0aGlzW3NpemVdLnB4OwogICAgICB9CgogICAgICByZXR1cm4gJyc7CiAgICB9CiAgfSwgewogICAga2V5OiAiX19yZWFjdHN0YW5kaW5fX3JlZ2VuZXJhdGVCeUV2YWwiLAogICAgLy8gQHRzLWlnbm9yZQogICAgdmFsdWU6IGZ1bmN0aW9uIF9fcmVhY3RzdGFuZGluX19yZWdlbmVyYXRlQnlFdmFsKGtleSwgY29kZSkgewogICAgICAvLyBAdHMtaWdub3JlCiAgICAgIHRoaXNba2V5XSA9IGV2YWwoY29kZSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU3BhY2luZ0NvbmZpZzsKfSgpOwoKdmFyIF9kZWZhdWx0ID0gU3BhY2luZ0NvbmZpZzsKZXhwb3J0IGRlZmF1bHQgX2RlZmF1bHQ7CgppZiAodHlwZW9mIFNwYWNpbmdDb25maWcgIT09ICd1bmRlZmluZWQnICYmIFNwYWNpbmdDb25maWcgJiYgU3BhY2luZ0NvbmZpZyA9PT0gT2JqZWN0KFNwYWNpbmdDb25maWcpICYmIE9iamVjdC5pc0V4dGVuc2libGUoU3BhY2luZ0NvbmZpZykpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BhY2luZ0NvbmZpZywgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIlNwYWNpbmdDb25maWciLAogICAgICBmaWxlbmFtZTogInNyYy9jb25maWcvc3BhY2luZy5qcyIKICAgIH0KICB9KTsKfQoKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgcmVhY3RIb3RMb2FkZXIgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5kZWZhdWx0OwoKICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICByZXR1cm47CiAgfQoKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihweFRvRU0sICJweFRvRU0iLCAiL3NpdGUvc3JjL2NvbmZpZy9zcGFjaW5nLmpzIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoZW1Ub1BYLCAiZW1Ub1BYIiwgIi9zaXRlL3NyYy9jb25maWcvc3BhY2luZy5qcyIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKGRlZmF1bHRTcGFjaW5nLCAiZGVmYXVsdFNwYWNpbmciLCAiL3NpdGUvc3JjL2NvbmZpZy9zcGFjaW5nLmpzIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoc3BhY2luZ1NpemVzLCAic3BhY2luZ1NpemVzIiwgIi9zaXRlL3NyYy9jb25maWcvc3BhY2luZy5qcyIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKFNwYWNpbmdDb25maWcsICJTcGFjaW5nQ29uZmlnIiwgIi9zaXRlL3NyYy9jb25maWcvc3BhY2luZy5qcyIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKF9kZWZhdWx0LCAiZGVmYXVsdCIsICIvc2l0ZS9zcmMvY29uZmlnL3NwYWNpbmcuanMiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/site/src/config/spacing.js"],"names":["TypographyConfig","valueToInt","safeGetValue","pxToEM","base","px","emToPX","em","defaultSpacing","min","tiny","xxSmall","xSmall","small","medium","large","xLarge","xxLarge","giant","max","spacingSizes","SpacingConfig","typographyConfig","config","Error","baseFontSize","sizes","forEach","size","configValue","includes","def","console","log"],"mappings":";;;;;;;;;;;;AAAA;AACA,OAAOA,gBAAP,MAA6B,cAA7B;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,YAAT,QAA6B,SAA7B;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAOC,EAAP;AAAA,mBAAiBJ,UAAU,CAACI,EAAD,CAAV,GAAiBJ,UAAU,CAACG,IAAD,CAA5C;AAAA,CAAf;;AACA,IAAME,MAAM,GAAG,SAATA,MAAS,CAACF,IAAD,EAAOG,EAAP;AAAA,mBAAiBN,UAAU,CAACM,EAAD,CAAV,GAAiBN,UAAU,CAACG,IAAD,CAA5C;AAAA,CAAf,C,CAEA;AACA;;;AAEA,IAAMI,cAAc,GAAG;AACrBC,EAAAA,GAAG,EAAE,GADgB;AAErBC,EAAAA,IAAI,EAAE,KAFe;AAGrBC,EAAAA,OAAO,EAAE,KAHY;AAIrBC,EAAAA,MAAM,EAAE,KAJa;AAKrBC,EAAAA,KAAK,EAAE,MALc;AAMrBC,EAAAA,MAAM,EAAE,MANa;AAOrBC,EAAAA,KAAK,EAAE,MAPc;AAQrBC,EAAAA,MAAM,EAAE,MARa;AASrBC,EAAAA,OAAO,EAAE,MATY;AAUrBC,EAAAA,KAAK,EAAE,MAVc;AAWrBC,EAAAA,GAAG,EAAE;AAXgB,CAAvB;AAcA,OAAO,IAAMC,YAAY,GAAG,CAC1B,KAD0B,EAE1B,MAF0B,EAG1B,SAH0B,EAI1B,QAJ0B,EAK1B,OAL0B,EAM1B,QAN0B,EAO1B,OAP0B,EAQ1B,QAR0B,EAS1B,SAT0B,EAU1B,OAV0B,EAW1B,KAX0B,CAArB;;;;;;;;;;;;;IAcDC,a;;;AACJ,yBAAYC,gBAAZ,EAA2C;AAAA;;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AAAA;;AACzC,QAAI,EAAED,gBAAgB,YAAYtB,gBAA9B,CAAJ,EAAqD;AACnD,YAAM,IAAIwB,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,QAAMC,YAAY,GAAGH,gBAAgB,CAACI,KAAjB,CAAuBtB,IAA5C;AAEAgB,IAAAA,YAAY,CAACO,OAAb,CAAqB,UAAAC,IAAI,EAAI;AAC3B,UAAMC,WAAW,GAAG3B,YAAY,CAACqB,MAAD,EAASK,IAAT,EAAe,EAAf,CAAhC;AACA,UAAIrB,EAAJ;AACA,UAAIF,EAAJ;;AACA,UAAIwB,WAAW,CAACC,QAAZ,CAAqB,IAArB,CAAJ,EAAgC;AAC9BvB,QAAAA,EAAE,GAAGJ,MAAM,CAACsB,YAAD,EAAeI,WAAf,CAAX;AACAxB,QAAAA,EAAE,GAAGwB,WAAL;AACD,OAHD,MAGO,IAAIA,WAAW,CAACC,QAAZ,CAAqB,IAArB,CAAJ,EAAgC;AACrCvB,QAAAA,EAAE,GAAGsB,WAAL;AACAxB,QAAAA,EAAE,GAAGC,MAAM,CAACmB,YAAD,EAAeI,WAAf,CAAX;AACD,OAHM,MAGA;AACL,YAAME,GAAG,GAAG7B,YAAY,CAACqB,MAAD,EAASK,IAAT,EAAepB,cAAc,CAACoB,IAAD,CAA7B,CAAxB;AACArB,QAAAA,EAAE,GAAGJ,MAAM,CAACsB,YAAD,EAAeM,GAAf,CAAX;AACA1B,QAAAA,EAAE,GAAG0B,GAAL;AACD;;AACD,MAAA,KAAI,CAACH,IAAD,CAAJ,GAAa;AAAErB,QAAAA,EAAE,EAAFA,EAAF;AAAMF,QAAAA,EAAE,EAAFA;AAAN,OAAb;AACD,KAhBD;AAkBA2B,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,IAA7B;AACD;;;;+BAEUL,I,EAAM;AACf,UAAI,KAAKA,IAAL,CAAJ,EAAgB;AACd,eAAO,KAAKA,IAAL,EAAWvB,EAAlB;AACD;;AACD,aAAO,EAAP;AACD;;;;;;;;;;;;;eAGYgB,a;AAAf;;;;;;;;;;;;;;;;;;;;;;0BAtEMlB,M;0BACAG,M;0BAKAE,c;0BAcOY,Y;0BAcPC,a","sourcesContent":["/* eslint-disable prefer-destructuring */\nimport TypographyConfig from './typography'\nimport { valueToInt } from '../utils/utils'\nimport { safeGetValue } from './utils'\n\nconst pxToEM = (base, px) => `${valueToInt(px) / valueToInt(base)}em`\nconst emToPX = (base, em) => `${valueToInt(em) / valueToInt(base)}px`\n\n// @TODO get default values from a config file.\n// To work correctly, these ratios need to be maintained exactly, e.g. xxSmall must be 2x tiny etc.\n\nconst defaultSpacing = {\n  min: '0',\n  tiny: '2px',\n  xxSmall: '4px',\n  xSmall: '8px',\n  small: '12px',\n  medium: '16px',\n  large: '24px',\n  xLarge: '32px',\n  xxLarge: '48px',\n  giant: '64px',\n  max: '88px',\n}\n\nexport const spacingSizes = [\n  'min',\n  'tiny',\n  'xxSmall',\n  'xSmall',\n  'small',\n  'medium',\n  'large',\n  'xLarge',\n  'xxLarge',\n  'giant',\n  'max',\n]\n\nclass SpacingConfig {\n  constructor(typographyConfig, config = {}) {\n    if (!(typographyConfig instanceof TypographyConfig)) {\n      throw new Error('SpacingConfig: invalid TypographyConfig')\n    }\n    const baseFontSize = typographyConfig.sizes.base\n\n    spacingSizes.forEach(size => {\n      const configValue = safeGetValue(config, size, '')\n      let em\n      let px\n      if (configValue.includes('px')) {\n        em = pxToEM(baseFontSize, configValue)\n        px = configValue\n      } else if (configValue.includes('em')) {\n        em = configValue\n        px = emToPX(baseFontSize, configValue)\n      } else {\n        const def = safeGetValue(config, size, defaultSpacing[size])\n        em = pxToEM(baseFontSize, def)\n        px = def\n      }\n      this[size] = { em, px }\n    })\n\n    console.log('SpacingConfig', this)\n  }\n\n  getSpacing(size) {\n    if (this[size]) {\n      return this[size].px\n    }\n    return ''\n  }\n}\n\nexport default SpacingConfig\n"]}]}